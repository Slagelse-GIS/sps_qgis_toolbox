# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SpsToolbox
                                 A QGIS plugin
 Laver xml snippets til Spatial Suite konfiguration
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-19
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Daníel Örn Árnason
        email                : daarn@slagelse.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsWkbTypes
import random
import xml.etree.ElementTree as ET

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .sps_toolbox_dialog import SpsToolboxDialog
import os.path


class SpsToolbox:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SpsToolbox_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Spatial Suite toolbox')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SpsToolbox', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sps_toolbox/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Lav xml snippet til Spatial Suite '),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&Spatial Suite toolbox'),
                action)
            self.iface.removeToolBarIcon(action)

    def datasource_xml(self, lyr):
        props = lyr.source().split(' ')
        props_list = [x.replace("'", '').replace('"', '').replace('(', '').replace(')', '') for x in props]
        props_dict = {}
        for prop in props_list:
            props = prop.split('=')
            if len(props) == 1:
                props_dict['geometryColumn'] = props[0]
            else:
                props_dict[props[0]] = props[1]

        ds_attrs = {
            'displayname': props_dict['table'].split('.')[1],
            'endpoint': f'ep_{props_dict["dbname"]}',
            'name': props_dict['table'].split('.')[1],
        }

        table_attrs ={
            'geometrycolumn': props_dict['geometryColumn'],
            'name': props_dict['table'].split('.')[1],
            'schema': props_dict['table'].split('.')[0],
            'pkcolumn': props_dict['key']

        }
        
        datasource = ET.Element('datasource', attrib=ds_attrs)
        table = ET.SubElement(datasource, 'table', attrib=table_attrs)

        ET.indent(datasource, '    ')
        xml = ET.tostring(datasource, encoding='unicode')

        return xml

    def presentation_xml(self, lyr):
        cols = [x.name() for x in lyr.fields()]

        text_attrs = {
            'name': 'overskrift',
            'plural': lyr.name(),
            'value': lyr.name()
        }

        presentation = ET.Element('presentation')
        text = ET.SubElement(presentation, 'text', text_attrs)
        columns = ET.SubElement(presentation, 'columns')

        heading_col = ET.SubElement(columns, 'column', {'format': 'heading'})
        label = ET.SubElement(heading_col, 'label')
        label.text = 'KOLONNENAVN'
        value = ET.SubElement(heading_col, 'value')
        value.text = 'KOLONNENAVN'
        
        for col in cols:
            column = ET.SubElement(columns, 'column')
            condition = ET.SubElement(column, 'condition')
            condition.text = f'Not IsNull({col})'
            label = ET.SubElement(column, 'label')
            label.text = f"'{col}'"
            value = ET.SubElement(column, 'value')
            value.text = col
        
        ET.indent(presentation, '    ')
        xml = ET.tostring(presentation, encoding='unicode')
        xml = '<?xml version="1.0" encoding="UTF-8"?>' + '\n' + xml
        
        return xml

    def target_xml(self, lyr):
        
        target_attrs = {
            'displayname': lyr.name().title(),
            'presentation': f'[module:MODULNAVN.dir]/presentations/pres-{lyr.name()}',
            'themecondition': f'theme-{lyr.name()}'
        }
        datasource_attrs = {
            'name': lyr.name()
        }
        
        target = ET.Element('target', attrib=target_attrs)
        datasource = ET.SubElement(target ,'datasource', datasource_attrs)

        ET.indent(target, '    ')
        xml = ET.tostring(target, encoding='unicode')

        return xml

    def theme_xml(self, lyr):
        geom_type = QgsWkbTypes.geometryDisplayString(lyr.geometryType())
        random_rgb = ' '.join([str(x) for x in random.choices(range(256), k=3)])

        theme = ET.Element('theme')

        clientlayers = ET.SubElement(theme, 'clientlayers')
        clientlayer = ET.SubElement(clientlayers, 'clientlayer', {'name': 'clientlayer'})
        singletile = ET.SubElement(clientlayer, 'singletile')
        singletile.text = 'true'
        
        cbinfo_metadata = ET.SubElement(theme, 'cbinfo-metadata')
        param = ET.SubElement(cbinfo_metadata, 'param', {'name': 'metadata.text'})
        param.text = 'INDSÆT BESKRIVELSE HER!'

        layer_attrs = {
            'datasource': lyr.name(),
            'downloadable': 'true',
            'name': lyr.name(),
            'type': geom_type.lower()
        }
        layer = ET.SubElement(theme, 'layer', layer_attrs)
        layer.text = f'[datasource:{lyr.name()}.mapfile-datasource]' +'\n    '
        lyr_class = ET.SubElement(layer, 'class')
        name = ET.SubElement(lyr_class, 'name')
        name.text = lyr.name().title()
        style = ET.SubElement(lyr_class, 'style')
        color = ET.SubElement(style, 'color')
        color.text = random_rgb
        if geom_type == 'Point':
            outlinecolor = ET.SubElement(style, 'outlinecolor')
            outlinecolor.text = '0 0 0'
            size = ET.SubElement(style, 'size')
            size.text = '8'
            symbol = ET.SubElement(style, 'symbol')
            symbol.text = 'circle'
        elif geom_type == 'Line':
            width = ET.SubElement(style, 'width')
            width.text = '4'
            linejoin = ET.SubElement(style, 'linejoin')
            linejoin.text = 'miter'
            symbol = ET.SubElement(style, 'symbol')
            symbol.text = 'circle'
        elif geom_type == 'Polygon':
            outlinecolor = ET.SubElement(style, 'outlinecolor')
            outlinecolor.text = '0 0 0'

        ET.indent(theme, '    ')
        xml = '<?xml version="1.0" encoding="UTF-8"?>' + '\n' + ET.tostring(theme, encoding='unicode')
        
        return xml
        
    def create_snippet(self):
        snippet_type = self.dlg.comboBox.currentText()
        active_lyr = self.dlg.mMapLayerComboBox.currentLayer()
        if self.check_db():
            if snippet_type == 'Datasource':
                xml = self.datasource_xml(active_lyr)
                self.dlg.textEdit.setPlainText(xml)
            elif snippet_type == 'Presentation':
                xml = self.presentation_xml(active_lyr)
                self.dlg.textEdit.setPlainText(xml)
            elif snippet_type == 'Target':
                xml = self.target_xml(active_lyr)
                self.dlg.textEdit.setPlainText(xml)
            elif snippet_type == 'Theme':
                xml = self.theme_xml(active_lyr)
                self.dlg.textEdit.setPlainText(xml)
        else:
            self.dlg.textEdit.setPlainText('Lag kommer IKKE fra en postgres database!')

    def check_db(self):
        active_lyr = self.dlg.mMapLayerComboBox.currentLayer()
        if active_lyr.providerType() == 'postgres':
            return True
        else:
            return False

    def populate_snippet_list(self):
        self.dlg.comboBox.addItems(['Datasource', 'Theme', 'Presentation', 'Target'])

    def copy_xml(self):
        self.dlg.textEdit.selectAll()
        self.dlg.textEdit.copy()
        self.create_snippet()
        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SpsToolboxDialog()
            self.populate_snippet_list()
            self.dlg.mMapLayerComboBox.currentIndexChanged.connect(self.create_snippet)
            self.dlg.comboBox.currentIndexChanged.connect(self.create_snippet)
            self.dlg.pushButton.clicked.connect(self.copy_xml)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
